
https://net.cybbh.io/-/public/-/jobs/875942/artifacts/modules/networking/slides-v4/11_acl-n.html 

Firewall types
  Zone-Based Policy Firewall (Zone-Policy Firewall, ZBF or ZFW)
  Host Based Firewalls
  Network Based Firewalls


CREATE ACCESS LIST
    Demo> enable #enter privileged exec mode
    Demo# configure terminal #enter global config mode
    Demo(config)# access-list 37 ... (output omitted) ...
    Demo(config)# ip access-list standard block_echo_request
    Demo(config)# access-list 123  ... (output omitted) ...
    Demo(config)# ip access-list extended zone_transfers

standard Numbered ACL
    router(config)# access-list {1-99 | 1300-1999}  {permit|deny}  {source IP add}
                    {source wildcard mask}
    router(config)#  access-list 10 permit host 10.0.0.1
    router(config)#  access-list 10 deny 10.0.0.0 0.255.255.255
    router(config)#  access-list 10 permit any

standard named acl
router(config)# ip access-list standard [name]
    router(config-std-nacl)# {permit | deny}  {source ip add}  {source wildcard mask}
    router(config)#  ip access-list standard CCTC-STD
    router(config-std-nacl)#  permit host 10.0.0.1
    router(config-std-nacl)#  deny 10.0.0.0 0.255.255.255
    router(config-std-nacl)#  permit any

extended numbered ACL
    router(config)# access-list {100-199 | 2000-2699} {permit | deny} {protocol}
                    {source IP add & wildcard} {operand: eq|lt|gt|neq}
                    {port# |protocol} {dest IP add & wildcard} {operand: eq|lt|gt|neq}
                    {port# |protocol}
    router(config)# access-list 144 permit tcp host 10.0.0.1 any eq 22
    router(config)# access-list 144 deny tcp 10.0.0.0 0.255.255.255 any eq telnet
    router(config)# access-list 144 permit icmp 10.0.0.0 0.255.255.255 192.168.0.0
                    0.0.255.255 echo
    router(config)# access-list 144 deny icmp 10.0.0.0 0.255.255.255 192.168.0.0
                    0.0.255.255 echo-reply
    router(config)# access-list 144 permit ip any any

extended named ACL
    router(config)# ip access-list extended  [name]
    router(config-ext-nacl)# [sequence number] {permit | deny} {protocol}
                             {source IP add & wildcard} {operand: eq|lt|gt|neq}
                             {port# |protocol} {dest IP add & wildcard} {operand:
                             eq|lt|gt|neq} {port# |protocol}
    router(config)# ip access-list extended CCTC-EXT
    router(config-ext-nacl)# permit tcp host 10.0.0.1 any eq 22
    router(config-ext-nacl)# deny tcp 10.0.0.0 0.255.255.255 any eq telnet
    router(config-ext-nacl)# permit icmp 10.0.0.0 0.255.255.255 192.168.0.0
                             0.0.255.255 echo
    router(config-ext-nacl)# deny icmp 10.0.0.0 0.255.255.255 192.168.0.0
                             0.0.255.255 echo-reply
    router(config-ext-nacl)# permit ip any any

Apply acl to and interface or line
    router(config)#  interface {type} {mod/slot/port}
    router(config)#  ip access-group {ACL# | name} {in | out}
    router(config)#  interface s0/0/0
    router(config-if)#  ip access-group 10 out
    router(config)#  interface g0/1/1
    router(config-if)#  ip access-group CCTC-EXT in
    router(config)#  line vty 0 15
    router(config)#  access-class CCTC-STD in


Acyually useful stuff
Placement
  In line
  or not


Recognition Methods
  Signature
  Heuristic aka Behavioral

/etc/snort
/etc/snort/snort.conf
/etc/snort/rules
snort
  -D - to run snort as a daemon
  -c - to specify a configuration file when running snort
  -l - specify a log directory
  -r - to have snort read a pcap file

To run snort as a Daemon
sudo snort -D -c /etc/snort/snort.conf -l /var/log/snort
To run snort against a PCAP
sudo snort -c /etc/snort/rules/file.rules -r file.pcap
[action] [protocol] [s.ip] [s.port] [direction] [d.ip] [d.port] ( match conditions ;)
Action - alert, log, pass, drop, or reject
* Protocol - TCP, UDP, ICMP, or IP
* Source IP address - one IP, network, [IP range], or any
* Source Port - one, [multiple], any, or [range of ports]
* Direction - source to destination or both
* Destination IP address - one IP, network, [IP range], or any
* Destination port - one, [multiple], any, or [range of ports]
* msg:"text" - specifies the human-readable alert message
* reference: - links to external source of the rule
* sid: - used to uniquely identify Snort rules (required)
* rev: - uniquely identify revisions of Snort rules
* classtype: - used to describe what a successful attack would do
* priority: - level of concern (1 - really bad, 2 - badish, 3 - informational)
* metadata: - allows a rule writer to embed additional information about the rule
* content:"text" - looks for a string of text.
* content:"|binary data|" - to look for a string of binary HEX
* nocase - modified content, makes it case insensitive
* depth: - specify how many bytes into a packet Snort should search for the
           specified pattern
* offset: - skips a certain number of bytes before searching (i.e. offset: 12)
* distance: - how far into a packet Snort should ignore before starting to
              search for the specified pattern relative to the end of the
              previous pattern match
* within: - modifier that makes sure that at most N bytes are between pattern
            matches using the content keyword
* flow: - direction (to/from client and server) and state of connection
         (established, stateless, stream/no stream)
* ttl: - The ttl keyword is used to check the IP time-to-live value.
* tos: - The tos keyword is used to check the IP TOS field for a specific value.
* ipopts: - The ipopts keyword is used to check if a specific IP option is present
* fragbits: - Check for R|D|M ip flags.
* dsize: - Test the packet payload size
* seq: - Check for a specific TCP sequence number
* ack: - Check for a specific TCP acknowledge number.
* flags: - Check for E|C|U|A|P|R|S|F|0 TCP flags.
* itype: - The itype keyword is used to check for a specific ICMP type value.
* icode: - The icode* logto: - The logto keyword tells Snort to log all packets that trigger this rule to
           a special output log file.
* session: - The session keyword is built to extract user data from TCP Sessions.
* react: - This keyword implements an ability for users to react to traffic that
           matches a Snort rule by closing connection and sending a notice.
* tag: - The tag keyword allow rules to log more than just the single packet that
         triggered the rule.
* detection_filter - defines a rate which must be exceeded by a source or destination
                     host before a rule can generate an event. keyword is used to check for a specific ICMP code value.
threshold: type [limit | threshold | both], track [by_src | by_dst],
count [#], seconds [seconds]

* limit - alerts on the 1st event during defined period then ignores the rest.
* threshold - alerts every [x] times during defined period.
* both - alerts once per time internal after seeing [x] amount of occurrences
         of event. It then ignores all other events during period.
* track - rate is tracked either by source IP address, or destination IP address
* count - number of rule matching in [s] seconds that will cause event_filter
          limit to be exceeded
* seconds - time period over which count is accrued. [s] must be nonzero value
    Look for anonymous ftp traffic:

    alert tcp any any -> any 21 (msg:"Anonymous FTP Login"; content: "anonymous";
    sid:2121; )

    This will cause the pattern matcher to start looking at byte 6 in the payload)

    alert tcp any any -> any 21 (msg:"Anonymous FTP Login"; content: "anonymous";
    offset:5; sid:2121; )
  * flow: - direction (to/from client and server) and state of connection
         (established, stateless, stream/no stream)
  * ttl: - The ttl keyword is used to check the IP time-to-live value.
  * tos: - The tos keyword is used to check the IP TOS field for a specific value.
  * ipopts: - The ipopts keyword is used to check if a specific IP option is present
  * fragbits: - Check for R|D|M ip flags.
  * dsize: - Test the packet payload size
  * seq: - Check for a specific TCP sequence number
  * ack: - Check for a specific TCP acknowledge number.
  * flags: - Check for E|C|U|A|P|R|S|F|0 TCP flags.
  * itype: - The itype keyword is used to check for a specific ICMP type value.
  * icode: - The icode keyword is used to check for a specific ICMP code value.
  threshold: type [limit | threshold | both], track [by_src | by_dst],
  count [#], seconds [seconds]
  
  * limit - alerts on the 1st event during defined period then ignores the rest.
  * threshold - alerts every [x] times during defined period.
  * both - alerts once per time internal after seeing [x] amount of occurrences
           of event. It then ignores all other events during period.
  * track - rate is tracked either by source IP address, or destination IP address
  * count - number of rule matching in [s] seconds that will cause event_filter
            limit to be exceeded
  * seconds - time period over which count is accrued. [s] must be nonzero value
        ICMP ping sweep

  alert icmp any any -> 10.10.0.40 any (msg: "NMAP ping sweep Scan";
  dsize:0; itype:8; icode:0; sid:10000004; rev: 1; )

  Look for a specific set of Hex bits (NoOP sled)

  alert tcp any any -> any any (msg:"NoOp sled"; content: "|9090 9090 9090|";
  sid:9090; rev: 1; )
    Telnet brute force login attempt

    alert tcp any 23 -> any any (msg:"TELNET login incorrect";
    content:"Login incorrect"; nocase; flow:established, from_server;
    threshold: type both, track by_src, count 3, seconds 30;
    classtype: bad-unknown; sid:2323; rev:6; )


























